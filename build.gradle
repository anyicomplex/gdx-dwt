allprojects {
    apply plugin: "java-library"
    repositories {
        mavenCentral()
    }
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }
    test {
        useJUnitPlatform()
    }
    ext {
        gdxVersion = '1.10.0'
        gdxControllersVersion = '2.2.1'
    }
    group 'io.github.anyicomplex'
    version gdxVersion
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
}

subprojects {
    if (!project.name.contains('natives')) {
        dependencies {
            implementation project(":")
        }
    }
}

project(":backends:lwjgl3") {
    dependencies {
        implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api 'com.github.kwhat:jnativehook:2.2.1'
        if (System.getProperty("os.name").toLowerCase().contains('linux')) {
            implementation 'io.github.anyicomplex:xdg-utils-java:1.1.3'
        }
    }
    task uberJar(type: Jar, dependsOn: jar) {
        archiveBaseName.set(rootProject.name)
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        dependsOn configurations.runtimeClasspath
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
        dependencies {
            exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
        }
        with jar
    }
}
